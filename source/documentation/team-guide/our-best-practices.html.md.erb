# Our Best Practices

- [Add GPG keys to sign your GitHub commits](best-practices/signing-github-commits.html)

## Jira


We use JIRA to manage our workload. 

The lifecycle of a ticket is as follows. A user realises a need in the system. This can be a Story, Bug or Task. Tickets in progress should be updated at the end of each day.

### Story üìö

A requirement or request which is written from the perspective of a end user. Most of our work can be ticketed as a story. We use a Story Template which is detailed below:

> **User Story:** 
>
> As a‚Ä¶ *[who is the user?]*  
> I need/want/expect to‚Ä¶ *[what does the user want to do?]*  
> So that‚Ä¶ *[why does the user want to do this?]*  
> 
> **Value / Purpose:**
> 
> *[Describe the value and purpose of the ticket]*
> 
> **Useful Contacts:**
> 
> *[Please add any useful contacts, these may include: Stakeholders, SME‚Äôs or 3rd Parties]*
> 
> **Additional Information:**
> 
> *[Please add any useful links or additional information that would be beneficial to anyone working on this ticket]*
> 
> **Definition of Done (DoD):**
> 
> *[Please clearly and concisely detail the DoD]*
> 
> Checklist for definition of done and acceptance criteria, example below (optional).
> 
> **Example**  
> 
> ‚úÖ Documentation has been written / updated  
> ‚úÖ README.md has been updated  
> ‚úÖ User docs have been updated  
> ‚úÖ Another team member has reviewed  
> ‚úÖ Tests are green  

### Bug üêõ

Anything detrimental to the system. Bugs affecting service are pulled into sprint and dealt with as a matter of priority.

### Task üìù

Something that can be completed by one person and is of limited complexity.  A task doesn't have to hold clear value for an end-user.

___

Once a ticket is in our backlog it will first go to [Backlog Refinement](../../documentation/general-information/our-ceremonies.html#backlog-refinement), where it will become 'Ready for Development' then prioritised in [Backlog Grooming](../../documentation/general-information/our-ceremonies.html#backlog-grooming). 

The ticket will then either be pulled into a Sprint during a [Sprint Planning](../../documentation/general-information/our-ceremonies.html#sprint-planning) session or it can remain indefinitely in 'Ready for Development' until the backlog is cleared out. 

If a ticket is Ready For Development, this does not necessarily mean the ticket will be ever be done. Tickets are pulled into Sprint based on their value and alignment to the current Roadmap. 

## Github

The cloud ops team follows a GitOps style workflow.  Any changes to the system should be made via a pull request against the appropriate repository.  

### All changes via Pull Request

All work undertaken by a member of the cloud ops team will take place in a branch. Branches are named after the corresponding ticket in Jira. Native integrations allow browsing straight to the branch from within Jira (if named correctly). An example of this is listed [here](developing-on-a-branch.html).

### Commit Early, Commit Often

If you're asking yourself "should I commit now"? then the answer is probably yes!  Committing regularly helps with avoiding conflicts.  It is especially helpful when you're pulled away to another task and need a little reminder of where you were.

### Main Branch  

As GitHubs default practice our main branch is named 'main' and not 'master'. More information [here](https://github.com/github/renaming).

### Gitmoji üòé

Yes, it made it to our best practices!  [Gitmoji](https://gitmoji.dev/) is a great way to tag commits according to what they're doing. It's a great suppliment to your commit messages and can help identify key commits quickly.   

Most of all - [have fun ü•ö](https://www.youtube.com/watch?v=dQw4w9WgXcQ) . 

## Test Driven Development

We follow [TDD](https://en.wikipedia.org/wiki/Test-driven_development) whenever it's possible to do so.
